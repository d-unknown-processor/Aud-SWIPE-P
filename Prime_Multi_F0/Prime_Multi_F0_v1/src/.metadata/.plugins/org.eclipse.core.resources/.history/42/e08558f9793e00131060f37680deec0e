/*
 * Name: AudSWIPE-P
 * Authors: Prof. Arturo Camacho
 * 			Bsc. Saul Calderon
 * 			Bsc. Gabriel Alvarado
 * General Description: Parallel C implementation of the AudSWIPE algorithm, originally
 * implemented in MATLAB
 * Thanks to: Kyle Gorman and  Alexander Iakovlev
 * Archive Description: Main function Aud-SWIPE-P,
 */

#include "PrimeMultiF0.h"
#define MI 100
#define MA 500
#define ST .0001
#define DT .001

#define LEADER	0

#define NOK     0

#define TRUE  1
#define FALSE 0

#define DERBS  .1
#define POLYV  .0013028 //  1 / 12 / 64 = 1 / 768
#define DLOG2P .0104167 // 1/96

#define ST .0001  // Feel free to change these
#define DT .001
#define MIN 100.
#define MAX  600.
#define VNUM                         1.5 // Current version

/*
*Returns the pitch strength of one pitch candidate, applying the kernel to the matrix of signals
*This is the kernel of Aud SWIPE'
*@param f, the erb scale
*@param NL, the normalized loudness matrix of signals
*@param pc, the pitch candidate
*@return vector, computed pitch strenghts
*/
vector pitchStrengthOneCandidate( vector f, matrix NL, double pc ){
	int n,i,j;
	vector S = zerov(NL.x);
	double p = f.v[f.x-1]/pc -0.75;//Number of harmonics
	vector q = copyv(f);
	if(p >= 0){
		n = floor(p);
	}else{
		n = ceil(p);
	}
	if(n == 0){
		return S;
	}
	vector k = zerov(f.x);//Kernel
	for(i = 0; i < q.x; i++){
		q.v[i] = q.v[i]/pc;//Normalize frequency w.r.t. candidate
	}
	intvector primos = primes(n);//This is A-SWIPE'
	vector prim = zerov(primos.x+1);
	for(i = primos.x-1;i >= 0; i--){
		prim.v[i+1] = primos.v[i];
	}
	prim.v[i+1] = 1;
	double val;
	for(i = 0; i < prim.x; i++){///PARALELIZAR AQUI **
		for(j = 0; j < q.x; j++){
			val = fabs(q.v[j]-prim.v[i]);
			if(val < 0.25){//Peaks weights
				k.v[j] = cos(2*M_PI*q.v[j]);
			}else{
				if(val > 0.25 && val < 0.75){//Valleys weights
					k.v[j] = k.v[j] + cos(2*M_PI*q.v[j]) / 2;
				}
			}
		}
	}
	//Apply envelope, envelope is not necessary in prime multi F0
	/*
	double norm = 0;
	for(i = 0; i < k.x; i++){
		k.v[i] = k.v[i]*sqrt(1./f.v[i]);
		if(k.v[i] > 0)
			norm += k.v[i]*k.v[i];
	}
	norm = sqrt(norm);*/
	//K+- normalize kernel
	//Normalization is not necessary in Prime multi F0
	/*
	for(i = 0; i < k.x; i++){
		k.v[i] = k.v[i]/norm;
	}*/
	//Compute pitch strength
	for(i = 0; i < NL.x; i++){
		for(j = 0; j < k.x; j++){
		S.v[i] += NL.m[i][j] * k.v[j];
		}
	}
	freeiv(primos);
	freev(k);
	freev(prim);
	freev(q);
	return S;
}

/*
*Returns the pitch strength of several pitch candidate, applying the kernel to the matrix of signals
*@param f, the erb scale
*@param L, the loudness matrix of signals
*@param pc, the pitch candidate
*@param j,
*@return matrix, computed pitch strenghts per pitch candidate
*/
matrix pitchStrengthAllCandidates(vector f, matrix L, vector pc, vector j){
	//Create pitch salience matrix
	if(DEBUG == 1)printf("\n		Create pitch salience matrix...\n");
	matrix S = zerom(j.x, L.x);
	vector k = zerov(j.x);
	int q, a, find, i, c;
	int ant = 0;
	vector pc2 = zerov(j.x);
	for(q = 0; q < j.x; q++){
		pc2.v[q] = pc.v[(int)j.v[q]];
	}
	for(q = 0; q < k.x; q++){//Find
		for(a = ant; f.x; a++){
			if(f.v[a] > pc2.v[q]/4.){
				find = a;
				break;
			}	
		}
		k.v[q] = find;
		ant = k.v[q];
	}
	//Loudness normalization factor
	if(DEBUG == 1)printf("\n		Loudness normalization factor...\n");
	matrix N = zerom(L.x, L.y);
	int fil,col;
	double suma = 0;
	for(fil = 0; fil<N.x; fil++, suma = 0){
		for(col = N.y-1; col >=0 ; col--){
			suma += L.m[fil][col]*L.m[fil][col];
			N.m[fil][col] = sqrt(suma);
		}
	} 
	double val;
	vector n;
	matrix NL;
	vector f2;
	if(DEBUG == 1)printf("\n		Normalize Loudness...\n");
	if(DEBUG == 1)printf("\n		Compute each candidate's pitch strength...\n");
	// Thread parallelization 3, each thread calculates the score of a pitch candidate
	#pragma omp parallel for private (NL, f2, n, val, i, a, c)
	for(q = 0; q < pc2.x; q++){

		NL = zerom(L.x, L.y-(int)k.v[q]);
		f2 = zerov(L.y-(int)k.v[q]);
		n = zerov(N.x);
		//Normalize Loudness
		for(i = 0; i < n.x; i++){
			val = N.m[i][(int)k.v[q]];
			if(val != 0){
				n.v[i] = val;
			}else{
				n.v[i] = 88888;
			}
		}
		for(i = 0; i < NL.x; i++){
			for(a = 0,c = (int)k.v[q]; a < NL.y; a++, c++){
				NL.m[i][a] = L.m[i][c] / n.v[i];
				f2.v[a] = f.v[c];
			}
		}
		//Compute pitch strength
		vector Si = pitchStrengthOneCandidate( f2, NL, pc2.v[q] );
		for(i = 0; i < Si.x; i++){
			S.m[q][i] = Si.v[i]; 
		}
		freev(Si);
		freev(f2);
		freev(n);
		freem(NL);
	}
	freev(k);
	freev(pc2);
	freem(N);
	return S;
}

/*
*Peforms polynomial tuning on the strength matrix to determine the pitch
*@param f, the erb scale
*@param NL, the normalized loudness matrix of signals
*@param pc, the pitch candidate
*@return vector, computed pitch strenghts
*/
vector pitch(matrix S, vector pc, double st) {
    int i;
    int j;
    int maxi; 
    int search = (int) round((log2(pc.v[2]) - log2(pc.v[0])) / POLYV + 1.);
    double nftc; 
    double maxv;
    double log2pc;
    double tc2 = 1. / pc.v[1];
    vector coefs;
    vector s = makev(3);
    vector ntc = makev(3);
    ntc.v[0] = ((1. / pc.v[0]) / tc2 - 1.) * 2. * M_PI; 
    ntc.v[1] = (tc2 / tc2 - 1.) * 2. * M_PI; 
    ntc.v[2] = ((1. / pc.v[2]) / tc2 - 1.) * 2. * M_PI;
    vector p = makev(S.y);
    for (j = 0; j < S.y; j++) {
        maxv = SHRT_MIN;  
        for (i = 0; i < S.x; i++) { 
            if (S.m[i][j] > maxv) {
                maxv = S.m[i][j];
                maxi = i;
            }
        }
        if (maxv > st) { // Make sure it's big enough
            if (maxi == 0 || maxi == S.x - 1) { // First or last? 
                p.v[j] = pc.v[0];
            }
            else { // Generic case
                tc2 = 1. / pc.v[maxi];
                log2pc = log2(pc.v[maxi - 1]); 
                s.v[0] = S.m[maxi - 1][j];
                s.v[1] = S.m[maxi][j];
                s.v[2] = S.m[maxi + 1][j]; 
                coefs = polyfit(ntc, s, 2); 
                maxv = SHRT_MIN; 
                for (i = 0; i < search; i++) { // Check the nftc space
                    nftc = polyval(coefs, ((1. / pow(2, i * POLYV + log2pc)) / 
                                                          tc2 - 1) * 2 * M_PI);
                    if (nftc > maxv) {
                        maxv = nftc;
                        maxi = i;
                    }
                } // Now we've got the pitch numbers we need
                freev(coefs);
                p.v[j] = pow(2, log2pc + (maxi * POLYV));
            }
        }
        else { // If not voiced during that interval, then...
            p.v[j] = NAN;
        } 
    }
    freev(ntc);
    freev(s);
    return(p);
}


/*
 * Creates the matrix of channels X
 * Must be done by the parent only, after this, it is sent to the slaves
 * @param wav, wav file name
 * @param min, minimum freq. to look for
 * @param max, max. freq. to look for
 * @param dt, pitch detection time interval
 * */
matrix calculateX(char wav[], double min, double max, double dt,  char* argv[], double paralelism, matrix* X, vector* fsInfo ){

		int maxvent, minvent;
		double  nyquist, nyquist2, fs;
		*fsInfo = zerov(2);
		int frames = 0;
		matrix ranges;
		clock_gettime(CLOCK_MONOTONIC, &startTotal);
		//x contains the sound signal
		vector x = readSoundFile(wav, &nyquist, &fs, &soundLength, &frames);
		//the file is null if the  number of frames is 0
		assert(x.x > 0);
		nyquist2 = nyquist * 2;
		if(DEBUG == 1){printf("\nInfo READ\n");}
		if (max > nyquist) {
		   //the maximum frequency to look for pitch candidates will be defined by the nyquist frequency
		   max = nyquist;
		   fprintf(stderr, "Max pitch > Nyquist ... max set to %.2f Hz.\n", max);
		}
		if (dt > nyquist2) {//If the time step is larger than the max Frequency of the sound, its set to it
		   dt = nyquist2;
		   fprintf(stderr, "Timestep > SR ... timestep set to %f.\n", nyquist2);
		}
		endLocalClock(&clocks, 1, "FileReading");
		if(DEBUG == 1){printf("\nFiltering signal into segments of the cochlea...\n");}
		//AudSWIPE pre-processing before
		//Calculates the response of the different cochleas segments
		//For the total time we will ignore the read file time.
		*X = audsys(x, (double)fs, &clocks);
		if(DEBUG == 1){printf("\nSignal divided in segments...\n");}
		if(DEBUG == 1){printf("\nCreating Aud-SwipeP variables...\n");}
		fsInfo->v[0] = fs;
		fsInfo->v[1] = (double)frames;
		//In here the work amount for every process is defined
		maxvent = round(log2(8 * fs / min));
		minvent = round(log2(8 * fs / max));
		int wSizes = maxvent - minvent + 1;
		ranges = generateWindowSizesRanges(paralelism,  wSizes);
		if(DEBUG == 1){printf("\n	Cochleas response calculation finished...\n");}
		freev(x);
		return ranges;
}

/*
 * Sends processed  data back to the leader or master process
 * @param mySi2
 * @param myJ
 * @param myMu
 * @param ds
 * @param nX
 * */
void sendDataToLeader(matrix mySi2, vector myJ, vector myMu, double ds, int nX){
	//Sends the data to the leader
	int numSlaves = getNumberProcesses() - 1;
	if(numSlaves > 0 && !isParent()){
		sendMatrix(LEADER, mySi2);
		sendVector(LEADER, myMu);
		sendVector(LEADER, myJ);
		sendDouble(LEADER, ds);
		sendDouble(LEADER, (double)nX);
	}
}

/*
 * Receives all the data from the children or slaves processes and builds the scores Matrix S
 * @param S, score matrix
 * @param t, time vector of the sound
 * @param fs, sampling frequency
 * @param ranges, ranges of the matrix S from each slave, to rebuild the final matrix S, from
 * */
matrix receiveDataBuildS(matrix S, vector t, double fs, matrix ranges){
	int ind;
	int p;
	int counter;
	int slave = 0;
	int numSlaves = getNumberProcesses() - 1;
	int a;
	double dn;
	double sizeN;
	//if it is a slave, sends the data
	if(isParent() && numSlaves > 0){//if its the master, receives the data
		vector mu = zerov(2);
		matrix Si = zerom(2,2);
		vector j = zerov(2);

		//receives and uses the part calculated by the slaves
		for(slave = 1; slave < (numSlaves + 1); ++slave){
			//i = (int)ranges.m[ myid ][ 0 ]; i < (int)ranges.m[ myid ][ 1 ]; i++
			for(counter = (int)ranges.m[ slave ][ 0 ]; counter < (int)ranges.m[ slave ][ 1 ]; ++counter ){
				receiveMatrix(slave, &Si);
				receiveVector(slave, &mu);
				receiveVector(slave, &j);
				receiveDouble(slave, &dn);
				receiveDouble(slave, &sizeN);
				vector n = zerov(((int) sizeN));
				for(ind = 0, a = 0; ind < n.x; a = a + dn, ind++){
						n.v[ind] = a;
				}
				for(ind = 0; ind < n.x; ind++){
					n.v[ind] = (n.v[ind]-1)/fs;
				}

				matrix Si2 = zerom(Si.x, t.x);
				vector g = zerov(Si.y);
				if(Si.y > 1){
					for(ind = 0; ind < Si2.x; ind++){
						for(p = 0; p < g.x; p++){
							g.v[p] = Si.m[ind][p];
						}
						interp1(n, g,t,Si2.m[ind]);
					}
				}
				for(ind = 0; ind < j.x; ind++){
					for(p = 0; p < S.y; p++){
						 S.m[(int)j.v[ind]][p]  += mu.v[ind]*Si2.m[ind][p];
					}
				}
			}
		}
	}
	return S;
}

/*
 * Gets the Loudness Matrix associated to a window size, using the ERB scale
 * @param i, current number of window size, in the window sizes array
 * @param ws, window sizes array
 * @param n,
 * @param Xz,
 * @param w,
 * @param fERBs, ERB frequency array
 * @param fi,
 * @param W,
 * @param tamX, size in x of the cochleas Matrix
 * */
matrix getWsLoudnessMat(int i, vector ws, vector n, matrix Xz, vector w, vector fERBs, vector fi, matrix W, int tamX){
	//End clock 8
	int p;
	int ind;
	int segm, col;
	int copia;
	double* window = 0;
	//Loudness matrix, in erb frequency scale
	//needs to be changed for Prime multiF0
	matrix L = zerom(n.x, fERBs.x);

	fftw_complex* fo = 0;
	if(DEBUG==1)printf("\n	Calculating FFT for each segment of the cochlea at every window...\n");
	if(DEBUG==1)printf("\n		Creating and Executing FFTW Plan (PARALLEL)...\n");

	 /* Thread parallelization 2, each thread calculates the Enhanced spectrum or ESRAS for a window
	 * */
	fftw_plan plan = fftw_plan_dft_r2c_1d(ws.v[i], window, fo, FFTW_ESTIMATE);
	#pragma omp parallel for private(segm,ind,col, window, copia, fo)
	for(p = 0; p < n.x; p++){
		vector sl = zerov(ws.v[i]);//Specific loudness
		//Compute specific loudness
		for(segm = 0; segm < tamX; segm++){/////PARALELIZAR AQUI
			window = fftw_malloc(sizeof(double) * ws.v[i]);
			fo = fftw_malloc(sizeof(fftw_complex)*ws.v[i]);
			ind = 0;
			for(col = n.v[p]; col < n.v[p] + ws.v[i]; col++, ind++){
				window[ind] = (w.v[ind]*Xz.m[segm][col]);
			}
			//Calculates the fft of the window calculated previously
			////Magnitudes
			fftw_execute_dft_r2c(plan, window, fo);
			copia = ws.v[i]-1;
			for(ind = 1; ind < ws.v[i]/2; ind++, copia--){//fft Calculates only the first n/2 + 1, because of nyquist
				fo[copia][0] = fo[ind][0];
				fo[copia][1] = fo[ind][1];
			}

			for(ind = 0; ind < ws.v[i]; ind++){
				sl.v[ind] += sqrt(
								sqrt((fo[ind][0]*fo[ind][0])
									+(fo[ind][1]*fo[ind][1]))
								* W.m[segm][ind]);//Specific loudness

				fo[ind][0] = 0;
				fo[ind][1] = 0;

			}
			fftw_free(window);
			fftw_free(fo);
		}
		// in ERB scale
		interp1(fi, sl, fERBs, L.m[p]);
		freev(sl);
	}
	fftw_destroy_plan(plan);
	endLocalClock(&cycleClocks, 0, "FourierTransforms");
	//End Clock 9
	//Eliminates the negatives from L
	Max(L.m, L.x, L.y, 0);
	return L;
}

/*
 * Gets the pitch candidates associated to the current window size
 * @param i, current window size in the window size array
 * @param ws, window sizes array
 * @param d,
 * @param ptrJ
 * @param ptrK
 * */
void getPitchCandidatesOfWs(int i, vector ws, vector d, vector* ptrJ, vector* ptrK){
	int cont, ind;
		//Determine pitch candidates that use this window size i
	if(ws.x == 1){
		resizev(ptrK, 0);
		for(ind = 0; ind < ptrJ->x; ind++){
			ptrJ->v[ind] = ind + 1;
		}
	}else{
		if(i == ws.x-1){
			cont = 0;
			for(ind = 0; ind < d.x; ind++){
				if(d.v[ind] - (double)(i + 1.) > -1){
					ptrJ->v[cont] = ind;
					cont++;
				}
			}
			resizev(ptrJ, cont);
			cont = 0;
			for(ind = 0; ind < ptrJ->x; ind++){
				if(d.v[(int)ptrJ->v[ind]] - (double)(i + 1.) < 0){
					ptrK->v[cont] = ind;
					cont++;
				}
			}
			resizev(ptrK, cont);
		}else{
			if(i == 0){
				cont = 0;
				for(ind = 0; ind < d.x; ind++){
					if(d.v[ind] - (double)(i+1) < 1.){
						ptrJ->v[cont] = ind;
						cont++;
					}
				}
				resizev(ptrJ, cont);
				cont = 0;
				for(ind = 0; ind < ptrJ->x; ind++){
					if(d.v[(int)ptrJ->v[ind]] - (double)(i+1.) > 0.){
						ptrK->v[cont] = ind;
						cont++;
					}
				}
				resizev(ptrK, cont);
			}else{
				cont = 0;
				for(ind = 0; ind < d.x; ind++){
					if(abs(d.v[ind] - (double)(i+1)) < 1.){
						ptrJ->v[cont] = ind;
						cont++;
					}
				}
				resizev(ptrJ, cont);
				cont = 0;
				for(ind = 0; ind < ptrJ->x; ind++){
					ptrK->v[ind] = ind;
				}
				resizev(ptrK, ptrJ->x);
			}
		}
	}

}


/*
 * Gets the Score matrix S for the current window size
 * @param i, current window size in the window size array
 * @param pc, Pitch candidates array
 * @param X, matrix with the cochleas response
 * @param fERBs, frequency array in the ERB scale
 * @param d,
 * @param S, Score matrix
 * @param fs, sampling frequency
 * @param p0,
 * @param t, time vector
 * */
void getWsScoreMat(int i, vector ws, vector pc, matrix X, vector fERBs, vector d, matrix S, double fs, vector p0, vector t){
	int ind, p;
	double a = 0;
	double woverlap = 0.5;
	matrix L, Xz, W, Si, Si2;
	vector w, n, fi, l, g, mu;
	vector f = zerov(X.x);
	if(DEBUG==1)printf("\nCalculating with window size = %f...\n", ws.v[i]);
	if(DEBUG==1)printf("\n	Determine pitch candidates that use this window size...\n");
	startLocalClock(&cycleClocks);
	//starts the clock
	vector j = zerov(pc.x);
	vector k = zerov(pc.x);
	//Gets the pitch candidates associated to the current window size
	getPitchCandidatesOfWs(i, ws, d, &j, &k);
	endLocalClock(&cycleClocks, 0, "DefPitchCandidates");
	// Zero pad signal
	if(DEBUG==1)printf("\n	Zero pad signal...\n");
	double dn = maxim(1, round(8 * (1 - woverlap)  * fs / p0.v[i] ));//Hop size
	Xz = zerom(X.x, X.y + (ws.v[i] / 2)+ (dn + ws.v[i] / 2) );
	int fil, col, col2;
	for(fil = 0; fil < X.x; fil++){
		col2 = 0;
		for(col = (ws.v[i] / 2); col < X.y + (ws.v[i] / 2); col++, col2++){
			Xz.m[fil][col] = X.m[fil][col2];
		}
	}
	endLocalClock(&cycleClocks, 0, "ZeroPadSignal");
	//End clock 5
	//Compute specific loudness
	if(DEBUG==1)printf("\n	Compute specific loudness...\n");
	//calculates hanning window
	w = zerov(ws.v[i]);
	Hanning(w.v,w.x);
	n = zerov(ceil((Xz.y - ws.v[i] + 1.) * (1. / dn)));//Centers of the windows
	for(ind = 0, a = 0; ind < n.x; a = a + dn, ind++){
		n.v[ind] = a;
	}
	//Specific-loudness matrix
	if(DEBUG==1)printf("\n	Creating specific-loudness matrix...\n");
	//This changes in Prime Multi F0, the scale is linear
	L = zerom(n.x, fERBs.x);
	double df = fs / ws.v[i];
	fi = zerov(ws.v[i]);
	for(ind = 0; ind < fi.x; ind++){
		fi.v[ind] = (double)ind * df;
	}
	l = zerov(X.x);
	for(ind = 0; ind < f.x; ind++) f.v[ind] = ind + 1.5;
	v_erbs2hz( f );
	endLocalClock(&cycleClocks, 0, "LoudnessMatrix");
	//End clock 6
	int m;
	int ant = 0;
	//Compute characteristic frequencies indices
	if(DEBUG==1)printf("\n	Compute characteristic frequencies indices...\n");
	for(m = 0; m < l.x;m++){
		//find
		int find =0;
		for(ind = fi.x-1; ind >=ant; ind--){
			if(fi.v[ind] < 1.25 * f.v[m]){
				find = ind;
				break;
			}
		}
		l.v[m] = find;
		ant = l.v[m];
	}

	// End clock 7
	endLocalClock(&cycleClocks, 0, "ComputeCharacteristicFrequencies");
	int q;
	int q2;
	W = zerom(f.x, fi.x);
	if(DEBUG==1)printf("\n	Compute raised-cosine weights...\n");
	for(q = 0; q < f.x; q++){
		//Compute raised-cosine weights
		for(q2 = 0; q2 <= l.v[q]; q2++){
			W.m[q][q2] = (1. - cos(M_PI * hz2erb(fi.v[q2])/(hz2erb(f.v[q]))))/2;
		}
	}
	endLocalClock(&cycleClocks, 0, "ComputeRaised-cosineWeights");
	//Calculates the Loudness Matrix
	//This changes in Prime Multi F0, the scale is linear
	L = getWsLoudnessMat( i,  ws,  n,  Xz, w, fERBs, fi, W, X.x);
	//Compute pitch strength
	if(DEBUG==1)printf("\n	Compute pitch strength...\n");
	//This changes in Prime Multi F0, the scale is linear
	Si = pitchStrengthAllCandidates(fERBs, L, pc, j);
	endLocalClock(&cycleClocks, 0, "ComputePitchStrength");
	//end clock 10
	//Interpolate pitch strength at desired times
	if(DEBUG==1)printf("\n	Interpolate pitch strength at desired times...\n");
	Si2 = zerom(Si.x, t.x);
	g = zerov(Si.y);
	if(Si.y > 1 && isParent()){
		for(ind = 0; ind < n.x; ind++){
			n.v[ind] = (n.v[ind] - 1)/fs;
		}
		for(ind = 0; ind < Si2.x; ind++){
			for(p = 0; p < g.x; p++){
				g.v[p] = Si.m[ind][p];
			}
			interp1(n, g, t, Si2.m[ind]);
		}

	}
	//End clock 11
	endLocalClock(&cycleClocks, 0, "InterpolatePitchStrength");
	//Compute contribution of this window size to pitch strength
	if(DEBUG==1)printf("\n	Compute contribution of this window size to pitch strength...\n");
	mu = onesv(j.x);
	for(ind = 0; ind < k.x; ind++){
		mu.v[(int)k.v[ind]] = 1 - fabs(d.v[(int)j.v[(int)k.v[ind]]]-(i+1));
	}
	//The parent process makes its own job, in case that there is only one process, runs normally
	if(isParent()){
		for(ind = 0; ind < j.x; ind++){
			for(p = 0; p < S.y; p++){
			 S.m[(int)j.v[ind]][p]  += mu.v[ind] * Si2.m[ind][p];
			}
		}
	}
	endLocalClock(&cycleClocks, 0, "ComputeContributionWindowSizePitchStrength");
	//sends data to parent
	sendDataToLeader(Si, j, mu, dn, n.x);
	freev(w);
	freev(mu);
	freev(g);
	freem(Si2);
	freem(Si);
	freem(W);
	freem(L);
	freev(l);
	freev(j);
	freev(k);
	freev(n);
	freev(fi);
	freem(Xz);

}
/*
 * vector pc, must be a column vector
 * */
matrix primeMultiF0(vector x, double fs, double infoFrames, double min, double max, double dt){
	vector t, ws, logWs, p0, log2pc, pc, d;
	matrix S;
	double a, dlog2p, dlog2p_max;
	int i, tamX, rango, maxvent, minvent;
	//Defines the t array
	t = zerov(ceil((double)((double)infoFrames / (double)fs) * (1. / dt) + 1));
	//Determine power-of-two window sizes
	if(DEBUG==1)printf("\n	Determine power-of-two window sizes...\n");
	maxvent = round(log2(8 * fs / min));
	minvent = round(log2(8 * fs / max));
	logWs = zerov(2);
	logWs.v[0] = maxvent;
	logWs.v[1] = minvent;

	//power-of-two window sizes
	ws = zerov(maxvent - minvent + 1);
	for(a = maxvent,i = 0; a >= minvent; a--, i++) ws.v[i] = pow(2, a);

	//Defines the  pitch candidates array pc
	dlog2p = 1./48.;
	rango = ceil((log2(max)-log2(min))*(1./dlog2p));
	vector log2pc = zerov(rango);
	vector pc = zerov(rango);
	dlog2p_max = log2(max);
	i = 0;
	//pc, pitch candidates array
	for(a = log2(min); a <= dlog2p_max; a = a+dlog2p, i++){
		log2pc.v[i] = a;
		pc.v[i] = pow(2, log2pc.v[i]);
	}

	//Builds the S matrix
	//Pitch Strength matrix, with the Parcial score of a set of window sizes
	S = zerom(pc.x, t.x);

	//Window sizes used by each pitch candidate
	p0 = zerov(ws.x);
	for(i = 0; i < p0.x; i++) p0.v[i] = 8*  fs / ws.v[i];
	//Determine window sizes used by each pitch candidate
	if(DEBUG==1)printf("\n	Determine window sizes used by each pitch candidate...\n");
	d = zerov(log2pc.x);
	for(i = 0; i < d.x; i++) d.v[i] = 1 + log2pc.v[i] - log2(8. * fs / ws.v[0]);


	return S;

}

void getWsScoreMat(int i, vector ws, vector pc, matrix X, vector d, matrix S, double fs, vector p0, vector t){
	int ind, p;
	double a = 0;
	//woverlap es DIFERENTE
	double woverlap = 0.5;
	matrix L, Xz, W, Si, Si2;
	vector w, n, fi, l, g, mu;
	vector j = zerov(pc.x);
	vector k = zerov(pc.x);
	//Gets the pitch candidates associated to the current window size
	getPitchCandidatesOfWs(i, ws, d, &j, &k);
	// Zero pad signal
	if(DEBUG==1)printf("\n	Zero pad signal...\n");
	//dn es DIFERENTE
	double dn = maxim(1, round(8 * (1 - woverlap)  * fs / p0.v[i] ));//Hop size
	//Xz es DIFERENTE!
	Xz = zerom(X.x, X.y + (ws.v[i] / 2)+ (dn + ws.v[i] / 2) );
	int fil, col, col2;
	for(fil = 0; fil < X.x; fil++){
		col2 = 0;
		for(col = (ws.v[i] / 2); col < X.y + (ws.v[i] / 2); col++, col2++){
			Xz.m[fil][col] = X.m[fil][col2];
		}
	}

}
/*
*Primary utility function for each pitch extraction
*Prime multi F0 has a different kernel, not normalized and without the envelope, and also does not use the ERB scale.
*Finally it applies a substraction of the prime multiples of each frecuency and eliminates the negative scores from the S matrix
*@param wav, name of the input signal
*@param paralelism, Paralelism level
*@param min, Start of frequency range
*@param max, End of frequency range
*@param dt, time delta
*@return vector, pitch array
*/
vector primeMultiF0(char wav[], double min, double max, double st, double dt, char* argv[], double paralelism, char* testName)  {
	int i, tamX, rango, maxvent, minvent;
	double a, dlog2p, dlog2p_max, fs;
	double dERBs = 0.1;
	vector fsInfo = zerov( 2 );
	double infoFrames = 0;
	matrix ranges = zerom(2, 2);
	matrix X = zerom( 2, 2 );
	FILE * time_test = NULL;
	vector p, t, f, logWs, ws, p0;
	matrix S, resultS;
	//The parent reads the file and Calculates the X matrix, containing the responses of the cochlea
	if( isParent() ){
		startLocalClock(&totalTime);
		//Calculates the ranges of processes to work and the X channel matrix
		ranges = calculateX( wav, min, max, dt,  argv, paralelism, &X, &fsInfo );
	}
	//Creates the processes using the MPIMatCommunicator
	//Only the parent takes in to account the number of processes
	createProcesses(ranges.x - 1, argv, EXE_NAME);
	//Gets the process Id
	myid = getProcessId();
	if(DEBUG == 1){printf("\n Processes created!\n");}
	// Variables received from the parent:
	// X: matrix X Cochleas responses at different frequency bands
	// fs: the sampling frequency
	// infoFrames: Frames information
	//starts the clock
	startLocalClock(&clocks);
	//Sends/ Receives the Channel matrix X 
	X = broadcastMatrix(myid, X);
	//Receives the sampling frequency and sound length info from the parent
	fsInfo = broadcastVector(myid,  fsInfo);
	fs = fsInfo.v[0];
	infoFrames = fsInfo.v[1];
	endLocalClock(&clocks, 1, "Sending X to processes");
	//End Parent sending data clock
	//Starts clock 2
	//t is the time array
	t = zerov(ceil((double)((double)infoFrames / (double)fs) * (1. / dt) + 1));
	a = 0;
	//The time array t is filled
	for(i = 0; i < t.x; i++, a = a + dt){
		t.v[i] = a;
	}
	if(DEBUG==1)printf("\nSignal divided in segments...\n");
	if(DEBUG==1)printf("\nCreating Aud-SwipeP variables...\n");
	tamX = X.x;
	f = zerov(tamX);
	//Defines the  pitch candidates array pc
	dlog2p = 1./48.;
	rango = ceil((log2(max)-log2(min))*(1./dlog2p)); 
	vector log2pc = zerov(rango);
	vector pc = zerov(rango);
	dlog2p_max = log2(max);
	i = 0;
	//pc, pitch candidates array
	for(a = log2(min); a <= dlog2p_max; a = a+dlog2p, i++){
		log2pc.v[i] = a;
		pc.v[i] = pow(2, log2pc.v[i]);
	}
	endLocalClock(&clocks, 1, "DefPitchCandidates");
	//End clock 2, Starts clock 3
	//Pitch Strength matrix, with the Parcial score of a set of window sizes
	S = zerom(pc.x, t.x);
	//Pitch Strength matrix with all the results
	//pitch candidates on rows, time on columns
	resultS = zerom(pc.x, t.x);
	//Determine power-of-two window sizes
	if(DEBUG==1)printf("\n	Determine power-of-two window sizes...\n");
	maxvent = round(log2(8 * fs / min));
	minvent = round(log2(8 * fs / max));
	logWs = zerov(2);
	logWs.v[0] = maxvent;
	logWs.v[1] = minvent;
	//power-of-two window sizes
	ws = zerov(maxvent - minvent + 1);
	for(a = maxvent,i = 0; a >= minvent; a--, i++) ws.v[i] = pow(2, a);
	//Optimal pitches for power-of-two window sizes
	if(DEBUG==1)printf("\n	Optimal pitches for power-of-two window sizes...\n");
	p0 = zerov(ws.x);
	for(i = 0; i < p0.x; i++) p0.v[i] = 8*  fs / ws.v[i];
	//Determine window sizes used by each pitch candidate
	if(DEBUG==1)printf("\n	Determine window sizes used by each pitch candidate...\n");
	vector d = zerov(log2pc.x);
	for(i = 0; i < d.x; i++) d.v[i] = 1 + log2pc.v[i] - log2(8. * fs / ws.v[0]);
	//Create ERB-scale uniformly-spaced frequencies (in Hertz)
	if(DEBUG==1)printf("\n	Create ERB-scale uniformly-spaced frequencies (in Hertz)...\n");
	vector fERBs = zerov(ceil((hz2erb(fs / 2.)) * (1. / dERBs)));
	for(i = 0, a = 0; i < fERBs.x; i++, a = a + dERBs) fERBs.v[i] = erb2hz(a);
	//Calculates the process workload
	//printf("WS.X %d\n", ws.x);
	ranges = generateWindowSizesRanges( paralelism, ws.x );
	//starts wsCycle clock
	//ends misc clock
	endLocalClock(&clocks, 1, "Pow2WindowSizes");
	// End Clock 3
	//Calculates the window size contribution to the score matrix
	for(i = (int)ranges.m[ myid ][ 0 ]; i < (int)ranges.m[ myid ][ 1 ]; i++){
		//Gets the Score matrix S for the given set of window sizes
		getWsScoreMat(i, ws, pc, X, fERBs, d, S, fs, p0, t);
	}
	//Receives the data from the slaves, to build the final Score matrix S
	if( isParent() ){
		//receives the data
		resultS = receiveDataBuildS( S, t, fs, ranges);
		//must do
		//processMatrixSprimeMultiF0(matrix S, vector pc)
		endLocalClock(&clocks, 0, "ReceiveMatrixS");
		//clock 13
		if(DEBUG == 1){printf("\nCompute pitch...\n");}
		//Must receive all the parts of S from the children to build p
		//This changes in Prime Multi F0, the pitch is not calculated, the matrix S is returned
		if(getNumberProcesses() > 1){
			//algorithm was executed by several processes, we need to use resultS
			p = pitch(resultS, pc, st);
		}
		else{
			//only one process ran the algorithm
			p = pitch(S, pc, st);
		}
		if(time_test != NULL){
			fclose(time_test);
		}
		endLocalClock(&clocks, 0, "computePitchMatrix");
		endLocalClock(&totalTime, 0, "Total time");
		//clock 14
		writeTimesToFile(testName, &totalTime, getNumberProcesses(), soundLength, wav);
		printf("\nDone with %d Processes in %f seconds\n", getNumberProcesses(), totalTime.values.v[0] );
		if(DEBUG==1)printf("\nFree everything...\n");
	}
	freev(f);
	freev(p0);
	freev(fERBs);
	freev(d);
	freem(X);
	freev(log2pc);
	freev(pc);
	freev(logWs);
	freev(ws);
	freev(t);
	freem(S);
	// Only one process will continue working
	finalizeMPI();
	//For the moment Prime multi F0 must return the Score matrix. The pitch for the simultaneous N notes are the first N candidates with the hightest score
	return(p);
}

/*
 * Receives the score matrix S and applies post processing required by prime multi F0 algorithm
 * @param S, score matrix, rows are pitch candidates, columns are the values in time
 */
matrix processMatrixSprimeMultiF0(matrix S, vector pc){
	/*Matlab code
	 * S = max ( 0 , S ) ;
		for i = primes ( pc ( end ) / pc ( 1 ) ) ;
		S = S - max ( 0 , interp1 ( pc , S , i * pc , ’ linear’ ,0));
		end
		S = max ( 0 , S ) ;
	 *
	 * */
	max(0, S);
	vector pcPrimes = zerov(pc.x);
	int numPrimes = (int)(pc.v[pc.x - 1] / pc.v[0]);
	intvector numsPrimesReason = primes(numPrimes);
	int i, j;
	for(i = 0; i < numsPrimesReason.x; ++i){
		printf("i: %d\n", numsPrimesReason.v[i]);
		int primeNum = numsPrimesReason.v[i];
		for(j = 0; j < pcPrimes.x; ++j){
			pcPrimes.v[j] = pc.v[j] * primeNum;
		}
		printf("Curr Vector primes:\n");
		printv(pcPrimes);
		matrix Sinterp = interp1Mat(pc, pcPrimes, S, 0);
		minus_local(S, Sinterp);

	}
	//substract prime factors of each pitch candidate
	//intvector primos = primes(n);//This is A-SWIPE'


}


/*
*Function for printing the pitch vector returned by AudSwipe
*@param vector p
*@param out
*@param dt
*@param mel
*@param vlo
*/
void printp(vector p, char out[], double dt, int mel, int vlo) {
    int i;
    double t = 0.; 
    FILE* sink; // Handle for printing to file/STDOUT
    if (strcmp(out, "<STDOUT>") == 0) {
        sink = stdout;
    }
    else {
        sink = fopen(out, "w");
        if (sink == NULL) {
            fprintf(stderr, "File or stream %s not writable, aborting.\n", out);
            exit(EXIT_FAILURE);
        }
    }
    if (mel) {
        if (vlo) {
            for (i = 0; i < p.x; i++) {
                fprintf(sink, "%4.7f %5.4f\n", t, hz2mel(p.v[i])); 
                t += dt;
            }
        }
        else { // Default case
            for (i = 0; i < p.x; i++) {
                if (!isnan(p.v[i])) {
                    fprintf(sink, "%4.7f %5.4f\n", t, hz2mel(p.v[i])); 
                }
                t += dt;
            }
        }
    }
    else {
        if (vlo) {
            for (i = 0; i < p.x; i++) {
                fprintf(sink, "%4.7f %5.4f\n", t, p.v[i]); 
                t += dt;
            }
        }
        else { 
            for (i = 0; i < p.x; i++) {
                if (!isnan(p.v[i])) {
                    fprintf(sink, "%4.7f %5.4f\n", t, p.v[i]); 
                }
                t += dt;
            }
        }
    } 
    fclose(sink); 
}
/*
 * Exit Success case
 * */
void exitSuccess(){
	finalizeMPI();
	exit(EXIT_SUCCESS);
}

/*
 * Failed Exit case
 * */
void exitFailure(){
	finalizeMPI();
	exit(EXIT_FAILURE);
}


/*
 * Executes the PrimeMultiF0 Algorithm
 *@param argc, number of arguments
 *@param argv, list of arguments
 * */
void executePrimeMultiF0(int argc, char* argv[]){
		//MPI is initialized
		initMPI( argc, argv );
		myid = getProcessId();

		char output[] = "OUTPUT:\npitch_0\ttime_0\npitch_1\ttime_1\n...\t...\
		\npitch_N\ttime_N\n\n";
		char header[] = "SWIPE' pitch tracker, implemented in C by Kyle Gorman \
		<kgorman@ling.upenn.edu>.\nBased on: Camacho, Arturo (2007). A sawtooth \
		waveform inspired pitch estimator\nfor speech and music. Doctoral \
		dissertation, University of Florida.\n\n\
		\tmore information: <http://ling.upenn.edu/~kgorman/c/swipe/>\n\n";
		char synops[] = "SYNPOSIS:\n\n\
		swipe [-i INPUT] [-b LIST] [-o OUTPUT] [-r MIN:MAX] [-s ST] [-t DT] [-mnhv]\n\n\
		FLAG:\t\tDESCRIPTION:\t\t\t\t\tDEFAULT:\n\n\
		-i FILE\t\tinput file\t\t\t\t\tSTDIN\n\
		-p PARALELISM\tParalelism level from 0 to 1, where 1 is the maximum level\t\tinput file\t\t\t\t\tSTDIN\n\
		-o FILE\t\toutput file\t\t\t\t\tSTDOUT\n\
		-b LIST\t\tbatch mode: [LIST is a file containing\n\
		\t\tone \"INPUT OUTPUT\" pair per line]\n\n\
		-r MIN:MAX\tpitch range in Hertz\t\t\t\t100:600\n\
		-s THRSHLD\tstrength threshold  [0 <= x <= 1]\t\t0.300\n\
		-t SECONDS\ttimestep in seconds [must be < SF / 2]\t\t0.001\n\n\
		-m\t\tOutput Mel pitch\t\t\t\tno\n\
		-n\t\tDon't output voiceless frames\t\t\tno\n\
		-h\t\tDisplay this message, then quit\n\
		-v\t\tDisplay version number, then quit\n\n";
		double st = ST; // All set by #defines
		double dt = DT;
		int vlo = TRUE;
		int mel = FALSE;
		double min = MIN;
		double max = MAX;
		double paralelism = 1;
		int ch;
		FILE* batch = NULL; // not going to be read that way,
		char wav[FILENAME_MAX] = "<STDIN>";
		char out[FILENAME_MAX] = "<STDOUT>";
		char* ptrTestFile = NULL;
		char testFileName[FILENAME_MAX] = "test_file.csv";
		char ptrOptArgTemp[FILENAME_MAX];
		clocks = initClocks(11);
		cycleClocks = initClocks(9);
		totalTime = initClocks(1);

		while ((ch = getopt(argc, argv, "i:o:r:s:t:b:p:z:mnhv")) != -1) {
			switch(ch) {
				case 'b':
					batch = fopen(optarg, "rt");
					break;
				case 'p':
					paralelism = atof(optarg);
					break;
				case 'z':
					strcpy(testFileName, optarg);
					ptrTestFile = testFileName;
					break;
				case 'i':
					strcpy(wav, optarg);
					break;
				case 'o':
					strcpy(out, optarg);
					break;
				case 'r':
					strcpy(ptrOptArgTemp, optarg);
					min = atof(strtok(ptrOptArgTemp, ":"));
					max = atof(strtok(NULL, ":"));
					break;
				case 's':
					st = atof(optarg);
					break;
				case 't':
					dt = atof(optarg);
					break;
				case 'm':
					mel = TRUE;
					break;
				case 'n':
					vlo = FALSE;
					break;
				case 'h':
					fprintf(stderr, "%s", header);
					fprintf(stderr, "%s", synops);
					fprintf(stderr, "%s", output);
					exitSuccess();
					break;
				case 'v':
					fprintf(stderr, "This is Aud-SWIPE-P', v. %1.1f.\n", VNUM);
					exitSuccess();
					break;
				case '?':
				default:  // Would like to do clever things here, but no ideas yet
						fprintf(stderr, "%s", header);
						fprintf(stderr, "%s", synops);
						exitFailure();;
						argc -= optind;
						argv += optind;
						break;
			}
		}
		//Paralelism goes through 0 to 1, where 1 is the maximum paralelism level (1 window size per proccess)
		if(paralelism > 1 || paralelism < 0){
			fprintf(stderr, "%s", synops);
			exitFailure();
		}
		if (min < 1.) { // Santiny-check the args
			fprintf(stderr, "Min pitch < 1 Hz, aborting.\n");
			exitFailure();
		}
		if (max - min < 1.) {
			fprintf(stderr, "Max pitch <= min pitch, aborting.\n");
			exitFailure();
		}
		if (st < 0. || st > 1.) {
			fprintf(stderr, "Strength must be 0 <= x <= 1, set to %.3f.\n", ST);
			st = -DBL_MAX;
		}
		if (dt < .001) {
			fprintf(stderr, "Timestep must be >= 0.001 (1 ms), set to %.3f.\n", DT);
			dt = DT;
		}
		if (batch != NULL) { // Iterate through batch pairs

			while (fscanf(batch, "%s %s", wav, out) != EOF) {
				fprintf(stderr, "%s -> %s ... ", wav, out);
				vector p = primeMultiF0(wav, min, max, st, dt, argv, paralelism, ptrTestFile);
				if (p.x == NOK) {
					fprintf(stderr, "File or stream %s failed.\n", wav);
					fclose(batch);
					exitFailure();
				}
				else {
					printp(p, out, dt, mel, vlo);
				}
				freev(p);
			}
			fclose(batch);
			exit(EXIT_SUCCESS);
		}
		else {
			vector p = primeMultiF0(wav, min, max, st, dt, argv, paralelism, ptrTestFile);
			if (p.x == NOK) {
				fprintf(stderr, "File or stream %s failed.\n", wav);
				fclose(batch);
				exitFailure();
			}
			else {
				if(DEBUG == 1){printf("\nFinal pitch vector:\n");}
				printp(p, out, dt, mel, vlo);
			}
			freev(p);

		}
}


