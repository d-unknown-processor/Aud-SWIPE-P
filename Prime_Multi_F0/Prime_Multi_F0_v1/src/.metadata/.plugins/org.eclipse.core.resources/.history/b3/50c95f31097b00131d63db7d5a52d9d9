/*
 * Name: AudSWIPE-P
 * Authors: Prof. Arturo Camacho
 * 			Bsc. Saul Calderon
 * 			Bsc. Gabriel Alvarado
 * General Description: Parallel C implementation of the AudSWIPE algorithm, originally
 * implemented in MATLAB
 * Archive Description: Testing scripts generator
 */

#include <sys/types.h>
#include <dirent.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
//#include "PrimeMultiF0.h"
#define MI 100
#define MA 500
//#define ST .0001
#define DT .01
#define PARALELISM 1
#define ARGC 12 //plus /0


#define TEST_DIR "../../Respaldos_Muestras/muestras/testDefinitivo/"



/* Using a NUC system??
 * Test scheme
 * First test (could be in  a core i7 and the NUC):
 * 	Goal: find the best suitable number of threads that achieves the fastest execution time
 * 	Try 1 2 4 8 16 and 32 number of threads and for each number of threads:
 * 		Execute 1 file of 44100 hz with 1 to 10 window sizes (frequency ranges)
 *  	Execute 1 file of 10000 hz with 1 to 10 window sizes (frequency ranges)
 *  	Take the average execution time
 * Second test: For the best number of threads found in the previous test
 * 	Execute with 1, 2, 3, 4, 6 and 8 cores the following:
 * 		Execute 1 file of 44100 hz with 1 to 10 window sizes (frequency ranges)
 * 		Execute 1 file of 10000 hz with 1 to 10 window sizes (frequency ranges)
 *		Take the average execution time
 *	This test aims to measure the algorithm scalability
 * */





/*
 * Writes a shell command in a file, MPI tests
 *
 */
void writeShCommand(FILE* shTest, char* route, char* archive, int paralelism, char* testFile, char* ptrResultsDir, char* FREQ_RANGE){
	fprintf(shTest, "echo Processing archive: %s \n", archive);
	fprintf(shTest, "echo With %d number of threads\n", paralelism);
	fprintf(shTest, "echo With %s freq. range\n", FREQ_RANGE);
	fprintf(shTest, "primeMultiF0 -i %s  -o %s_Result.txt -r %s -p %d  -z %s\n", route, ptrResultsDir, FREQ_RANGE, paralelism, testFile);
}



/*
 * Generates the scripts
 * */
void scriptInstrumentTestFixedFile(FILE* shTest, char *ptrArchive, int min, int max, int fs,  int numThreads){
		char ptrMainDir[200] = "input/";
		char ptrResultsDir[200] = "Results/";

		char ptrTestCSV[200] = "TimeResults/Test_";
		char *ptrPtrTest = NULL;
		char ptrFreqRange[30] = "";
		char ptrMin[10];
		char ptrMax[10];
		sprintf ( ptrMin, "%d", min );
		sprintf ( ptrMax, "%d", max );
		strcat(ptrFreqRange, ptrMin);
		strcat(ptrFreqRange, ":");
		strcat(ptrFreqRange, ptrMax);
		strcat(ptrMainDir, ptrArchive);

		strcat(ptrResultsDir, ptrArchive);
		strcat(ptrTestCSV, ptrArchive);
		strcat(ptrTestCSV, ptrArchive);
		strcat(ptrTestCSV, ".csv");
		//fprintf(shTest, "mkdir %s\n", ptrResultsDir);
		writeShCommand(shTest, ptrMainDir, ptrArchive, numThreads, ptrTestCSV, ptrResultsDir, ptrFreqRange );

}

/*
 * Generates the parallelism tests
 * */
void runInstrumentsTimeTestsThreadsNumber(){
	FILE* shTest = fopen ("runTestThreadsNumber.sh", "w");
	fprintf(shTest, "sudo make clean\n");
	fprintf(shTest, "sudo make install\n");
	fprintf(shTest, "mkdir TimeResults\n" );
	fprintf(shTest, "mkdir Results\n");
	int numThreads = 8;
	int maxPCs[8] = {200, 500, 800, 1000, 1500, 2000, 2600, 4000};
	int maxPcInd;

	for(maxPcInd = 0; maxPcInd < 8; ++maxPcInd){
		for(numThreads = 1; numThreads < 9; ++numThreads){
			scriptInstrumentTestFixedFile( shTest, "trumpet_44100hz.wav", 30, maxPCs[maxPcInd], 44100,  numThreads * 2);
		}
	}

	printf("\ntest Script done\n");
	fclose(shTest);
}

void toogleCPU(FILE* shTest, int online, int cpu){
	fprintf(shTest, "echo %d > /sys/devices/system/cpu/cpu%d/online\n", online, cpu);
}



/*
 * Main method
 * @param -p, the degree of paralelism 0 or 1
 * */

int main(int argc, char* argv[]) {

	runInstrumentsTimeTestsThreadsNumber();
	exit(EXIT_SUCCESS);
}




