/*
 * SPUtilities.cpp
 *
 *  Created on: Apr 23, 2013
 *      Author: saul
 */

#include "SPUtilities.h"


#define VNUM                         1.0 // Current version

#ifndef NAN
    #define NAN                      sqrt(-1.)
#endif

#ifndef isnan
int isnan(double x) {
    return(x !=x);
}
#endif



/*
 * Rounds to the nearest integer value
 * @param x, double value to round up
 * */

double round2(double x) { // Rounds a double to the nearest integer value
    return(x >= 0. ? floor(x + .5) : floor(x - .5));
}


/*
*Returns the interpolated function
*@param f, the function to interpolate
*@param g
*@param x, x values corresponding to the function f
*@param y, interpolated function
*/
void interp1(vector f, vector g, vector x, double* y){
	int i = 0;
	int a = 0;
	double x0 ;
	double x1;
	double y0;
	double y1;
	x0 = 0;
	x1 = f.v[i];
	y0 = 0;
	y1 = g.v[i];//This section calculates when x's indexes are inferior than the ones in f
	while(x.v[a]<f.v[i] && a < x.x){
		y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Lineal interpolation formula
		a++;
	}
	//This section calculates when the values from x are in f's the range.
	while(i < f.x && a < x.x){
		if(f.v[i] < x.v[a]){
			i++;
		}else{
			x0 = f.v[i-1];
			x1 = f.v[i];
			y0 = g.v[i-1];
			y1 = g.v[i];
			y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Formula de interpolacion lineal
			a++;
		}
	}
	x0 = f.v[i-1];
	x1 = 0;
	y0 = g.v[i-1];
	y1 = 0;
	if(a < x.x){
		y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Lineal interpolation formula
		a++;
	}
	//This section calculates when the values of x are above the ones from f
	while(a < x.x){
		y[a] = 0;
		a++;
	}
}

/*
*Calculates the logarithm in base 2
*@param x, number to calculate
*@return double, the logatithm in base 2
*/
double log2(double x) { // A base-2 log function
    return(log(x) / log(2.));
}


/*
*Rounds a double to the nearest integer value
*@param x, number to round
*@return double, rounded number
*/
#ifndef round
double round(double x) { // Rounds a double to the nearest integer value
    return(x >= 0. ? floor(x + .5) : floor(x - .5));
}
#endif

/*
*Converts hz value to the mel scale
*@param hz, value in hz
*@return double, mel value
*/
double hz2mel(double hz) { // Converts from hertz to Mel frequency
    return(1127.01048 * log(1. + hz / 700.));
}

/*
*Converts from hertz to ERBs
*@param hz, value in hz
*@return double, ERBs value
*/
double hz2erb(double hz) { // Converts from hertz to ERBs
    return(21.4 * log10(1. + hz / 229.));
}

/*
*Converts from ERBs to hertz
*@param hz, value in hz
*@return double, erb value
*/
double erb2hz(double erb) { // Converts from ERBs to hertz
    return((pow(10, erb / 21.4) - 1.) * 229.);
}

/*
*A silly function that treats NaNs as 0.
*@param hz, value in hz
*@return double, erb value
*/
double fixnan(double x) { // A silly function that treats NaNs as 0.
    return(isnan(x) ? 0. : x);
}

/*
*Returns the maximum between the received numbers
*@param x, number to compare
*@param y, number to compare
*@return double,result
*/
double maxim(double x, double y){
	return(x>=y ? x : y);
}
