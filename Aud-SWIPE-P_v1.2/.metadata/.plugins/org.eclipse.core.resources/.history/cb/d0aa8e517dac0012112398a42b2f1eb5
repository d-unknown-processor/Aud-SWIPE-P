/*
 * SPUtilities.cpp
 *
 *  Created on: Apr 23, 2013
 *      Author: saul
 */

#include "SPUtilities.h"


#define VNUM                         1.0 // Current version

#ifndef NAN
    #define NAN                      sqrt(-1.)
#endif

#ifndef isnan
int isnan(double x) {
    return(x !=x);
}
#endif



/*
 * Rounds to the nearest integer value
 * @param x, double value to round up
 * */

double round2(double x) { // Rounds a double to the nearest integer value
    return(x >= 0. ? floor(x + .5) : floor(x - .5));
}


/*
*Returns the interpolated function
*@param f, the function to interpolate
*@param g
*@param x, x values corresponding to the function f
*@param y, interpolated function
*/
void interp1(vector f, vector g, vector x, double* y){
	int i = 0;
	int a = 0;
	double x0 ;
	double x1;
	double y0;
	double y1;
	x0 = 0;
	x1 = f.v[i];
	y0 = 0;
	y1 = g.v[i];//This section calculates when x's indexes are inferior than the ones in f
	while(x.v[a]<f.v[i] && a < x.x){
		y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Lineal interpolation formula
		a++;
	}
	//This section calculates when the values from x are in f's the range.
	while(i < f.x && a < x.x){
		if(f.v[i] < x.v[a]){
			i++;
		}else{
			x0 = f.v[i-1];
			x1 = f.v[i];
			y0 = g.v[i-1];
			y1 = g.v[i];
			y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Formula de interpolacion lineal
			a++;
		}
	}
	x0 = f.v[i-1];
	x1 = 0;
	y0 = g.v[i-1];
	y1 = 0;
	if(a < x.x){
		y[a] = y0 + (((x.v[a]- x0)*y1 -(x.v[a] -x0)*y0)/(x1-x0));//Lineal interpolation formula
		a++;
	}
	//This section calculates when the values of x are above the ones from f
	while(a < x.x){
		y[a] = 0;
		a++;
	}
}

/*
*Calculates the logarithm in base 2
*@param x, number to calculate
*@return double, the logatithm in base 2
*/
double log2(double x) { // A base-2 log function
    return(log(x) / log(2.));
}


/*
*Rounds a double to the nearest integer value
*@param x, number to round
*@return double, rounded number
*/
#ifndef round
double round(double x) { // Rounds a double to the nearest integer value
    return(x >= 0. ? floor(x + .5) : floor(x - .5));
}
#endif

/*
*Converts hz value to the mel scale
*@param hz, value in hz
*@return double, mel value
*/
double hz2mel(double hz) { // Converts from hertz to Mel frequency
    return(1127.01048 * log(1. + hz / 700.));
}

/*
*Converts from hertz to ERBs
*@param hz, value in hz
*@return double, ERBs value
*/
double hz2erb(double hz) { // Converts from hertz to ERBs
    return(21.4 * log10(1. + hz / 229.));
}

/*
*Converts from ERBs to hertz
*@param hz, value in hz
*@return double, erb value
*/
double erb2hz(double erb) { // Converts from ERBs to hertz
    return((pow(10, erb / 21.4) - 1.) * 229.);
}

/*
*Converts the hz scale value in to a ERB scale value
*@param hz, the value in hz
*@return double, the value in ERB scale
*/
double hz2erbs(double hz){
	return (21.4 * log10( 1 + hz/229 ));
}

/*
*Converts the ERB scaled array in to a HZ scale array
*@param erbs, the array in ERBS
*@param size, the array's size
*/
void v_erbs2hz(vector erbs){
	int i;
	for(i = 0; i < erbs.x; i++){
		erbs.v[i] = (pow(10, (erbs.v[i]/21.4)) - 1 ) * 229;
	}
}

/*
*A silly function that treats NaNs as 0.
*@param hz, value in hz
*@return double, erb value
*/
double fixnan(double x) { // A silly function that treats NaNs as 0.
    return(isnan(x) ? 0. : x);
}

/*
*Returns the maximum between the received numbers
*@param x, number to compare
*@param y, number to compare
*@return double,result
*/
double maxim(double x, double y){
	return(x>=y ? x : y);
}


/*
*Filter function that receives the coeficients of the characteristic function of the transfer function
*MATLAB like filter function
*@param b, filter coeficients
*@param L,
*@param x, input signal
*@param y, output signal
*@param tam, the size of the vector x
*/
void Filter_B(double * b, int L, double * x  ,int size_x, double* y){
	int i;
	int j = 0;
	double * xp = (double*)malloc(sizeof(double)*(size_x+L+L));
	for(i = 0; i < L; i++){ xp[i] = 0; xp[size_x+L+L-i-1] = 0;}
	for(i = L; i < size_x+L; i++){
		xp[i] = x[i-L];
	}
	int k = 0;
	int chunkSize = (int)((size_x+L+((L+1)/2)-1)- (L+((L+1)/2)-1));
	for(i = L+((L+1)/2)-1; i < size_x+L+((L+1)/2)-1; i++){//Applies the filter
		y[k] = 0;
		for(j = 0; j < L ; j++){
			y[k] = y[k] + (b[j]*xp[i-j]);
		}
		k++;
	}
	free(xp);
}
/*
*Filter function that receives the coeficients of A and B's polynoms from the transfer function
*MATLAB like filter function
*@param b, b's filter coeficients
*@param a, a's filter coeficients
*@param L,
*@param x, input signal
*@param y, output signal
*@param tam, the size of the vector x
*/
void Filter_AB(double * b, double * a, int L, double * x  ,int size_x, double* y){
	int i;
	int j = 0;
	double * xp = (double*)malloc(sizeof(double)*(size_x+L));
	double * yp = (double*)malloc(sizeof(double)*(size_x+L));
	for(i = 0; i < L; i++){ xp[i] = 0; yp[i] = 0;}
	for(i = L; i < size_x+L; i++){
		xp[i] = x[i-L];
		y[i-L] = 0;
		yp[i] = 0;
	}
	int k = 0;
	for(i = L; i < size_x+L; i++, k++){
		for(j = 0; j < L ; j++){
			yp[i] = yp[i] + (b[j]*xp[i-j]);
		}
		y[k] = yp[i];
		for(j = 1; j < L ; j++){
			y[k] = y[k] -(a[j]*yp[i-j]);
			yp[i] = y[k];
		}
	}
	free(xp);
	free(yp);
}



/*
*Normalizes an array, with the minimum frequency at f[0] and the maximum at f[size-1]
*@param f, array of frecuencies
*@param size, f's size
*/
void normalize(vector f){
	int i;
	double min = f.v[0];
	double max = f.v[f.x-1];
	for(i = 0; i < f.x; i++){
		//f[i] = (f[i]-min) / (max - min);, bug corrected
		f.v[i] = f.v[i] / max;
	}
}

/*
*Uses lineal interpolation to interpolate the function given in f
*@param f, function to interpolate
*@param g,
*@param x,
*@param end,
*@return double, the interpolated function
*/
double interp(double* f, double* g, double x, int end){
	double y;
	int i = 0;
	while(f[i] < x){
		i++;
	}
	double x0 = f[i-1];
	double x1 = f[i];
	double y0 = g[i-1];
	double y1 = g[i];
	y = y0 + (((x- x0)*y1 -(x -x0)*y0)/(x1-x0));//Formula de interpolacion lineal
	return y;
}
